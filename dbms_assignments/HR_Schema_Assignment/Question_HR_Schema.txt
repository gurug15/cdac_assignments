
-------------------------------------------- Restricting and Sorting Data-------------------------------------------
The HR department needs your assistance in creating some queries.
1.	Because of budget issues, the HR department needs a report that displays the last name and salary of employees earning more than $12,000.


mysql> select last_name, salary from employees where salary>12000;
+-----------+----------+
| last_name | salary   |
+-----------+----------+
| King      | 24000.00 |
| Kochhar   | 17000.00 |
| De Haan   | 17000.00 |
| Russell   | 14000.00 |
| Partners  | 13500.00 |
| Hartstein | 13000.00 |
+-----------+----------+
6 rows in set (0.00 sec)



_________________________________________________________________________________________________________________________________________________________________

2.	Open a new SQL Worksheet. Create a report that displays the last name and department number for employee number 176.




_________________________________________________________________________________________________________________________________________________________________
3.	The HR department needs to find high-salary and low-salary employees. Modify lab_03_01.
sql to display the last name and salary for all employees whose salary is not in the range $5,000 through $12,000.

mysql> select max(salary) High_sal,min(salary) Low_sal from employees;
+----------+---------+
| High_sal | Low_sal |
+----------+---------+
| 24000.00 | 2100.00 |
+----------+---------+
1 row in set (0.00 sec)

mysql> select last_name,salary from employees
    -> where salary not between 5000 and 12000
    -> limit 20;
+-------------+----------+
| last_name   | salary   |
+-------------+----------+
| King        | 24000.00 |
| Kochhar     | 17000.00 |
| De Haan     | 17000.00 |
| Austin      |  4800.00 |
| Pataballa   |  4800.00 |
| Lorentz     |  4200.00 |
| Khoo        |  3100.00 |
| Baida       |  2900.00 |
| Tobias      |  2800.00 |
| Himuro      |  2600.00 |
| Colmenares  |  2500.00 |
| Nayer       |  3200.00 |
| Mikkilineni |  2700.00 |
| Landry      |  2400.00 |
| Markle      |  2200.00 |
| Bissot      |  3300.00 |
| Atkinson    |  2800.00 |
| Marlow      |  2500.00 |
| Olson       |  2100.00 |
| Mallin      |  3300.00 |
+-------------+----------+
20 rows in set (0.00 sec)
_________________________________________________________________________________________________________________________________________________________________
4.	Modify above query  to list the last name and salary of employees who earn between
	$5,000 and $12,000, and are in department 20 or 50. Label the columns Employee and Monthly Salary, respectively.
mysql> select last_name Employee,salary as "Monthly salary" from employees
    -> where salary not between 5000 and 12000
    -> and department_id in (20,50);
+-------------+----------------+
| Employee    | Monthly salary |
+-------------+----------------+
| Nayer       |        3200.00 |
| Mikkilineni |        2700.00 |
| Landry      |        2400.00 |
| Markle      |        2200.00 |
| Bissot      |        3300.00 |
| Atkinson    |        2800.00 |
| Marlow      |        2500.00 |
| Olson       |        2100.00 |
| Mallin      |        3300.00 |
| Rogers      |        2900.00 |
| Gee         |        2400.00 |
| Philtanker  |        2200.00 |
| Ladwig      |        3600.00 |
| Stiles      |        3200.00 |
| Seo         |        2700.00 |
| Patel       |        2500.00 |
| Rajs        |        3500.00 |
| Davies      |        3100.00 |
| Matos       |        2600.00 |
| Vargas      |        2500.00 |
| Taylor      |        3200.00 |
| Fleaur      |        3100.00 |
| Sullivan    |        2500.00 |
| Geoni       |        2800.00 |
| Sarchand    |        4200.00 |
| Bull        |        4100.00 |
| Dellinger   |        3400.00 |
| Cabrio      |        3000.00 |
| Chung       |        3800.00 |
| Dilly       |        3600.00 |
| Gates       |        2900.00 |
| Perkins     |        2500.00 |
| Bell        |        4000.00 |
| Everett     |        3900.00 |
| McCain      |        3200.00 |
| Jones       |        2800.00 |
| Walsh       |        3100.00 |
| Feeney      |        3000.00 |
| OConnell    |        2600.00 |
| Grant       |        2600.00 |
| Hartstein   |       13000.00 |
+-------------+----------------+
41 rows in set (0.00 s)



_________________________________________________________________________________________________________________________________________________________________
6.	Modify lab_03_03.sql to list the last name and salary of employees who earn between
	$5,000 and $12,000, and are in department 20 or 50. Label the columns Employee and Monthly Salary, respectively.

mysql> select last_name Employee,salary as "Monthly salary" from employees
    -> where salary not between 5000 and 12000
    -> and department_id in (20,50);
+-------------+----------------+
| Employee    | Monthly salary |
+-------------+----------------+
| Nayer       |        3200.00 |
| Mikkilineni |        2700.00 |
| Landry      |        2400.00 |
| Markle      |        2200.00 |
| Bissot      |        3300.00 |
| Atkinson    |        2800.00 |
| Marlow      |        2500.00 |
| Olson       |        2100.00 |
| Mallin      |        3300.00 |
| Rogers      |        2900.00 |
| Gee         |        2400.00 |
| Philtanker  |        2200.00 |
| Ladwig      |        3600.00 |
| Stiles      |        3200.00 |
| Seo         |        2700.00 |
| Patel       |        2500.00 |
| Rajs        |        3500.00 |
| Davies      |        3100.00 |
| Matos       |        2600.00 |
| Vargas      |        2500.00 |
| Taylor      |        3200.00 |
| Fleaur      |        3100.00 |
| Sullivan    |        2500.00 |
| Geoni       |        2800.00 |
| Sarchand    |        4200.00 |
| Bull        |        4100.00 |
| Dellinger   |        3400.00 |
| Cabrio      |        3000.00 |
| Chung       |        3800.00 |
| Dilly       |        3600.00 |
| Gates       |        2900.00 |
| Perkins     |        2500.00 |
| Bell        |        4000.00 |
| Everett     |        3900.00 |
| McCain      |        3200.00 |
| Jones       |        2800.00 |
| Walsh       |        3100.00 |
| Feeney      |        3000.00 |
| OConnell    |        2600.00 |
| Grant       |        2600.00 |
| Hartstein   |       13000.00 |
+-------------+----------------+
41 rows in set (0.00 s)

_________________________________________________________________________________________________________________________________________________________________
5.	Create a report to display the last name, job ID, and hire date for employees with the last names of Matos and Taylor. Order the query in ascending order by hire date.

mysql> select last_name,job_id,hire_date from employees
    -> where last_name in ('matos','taylor')
    -> order by hire_date;
+-----------+----------+------------+
| last_name | job_id   | hire_date  |
+-----------+----------+------------+
| Taylor    | SH_CLERK | 1998-01-24 |
| Matos     | ST_CLERK | 1998-03-15 |
| Taylor    | SA_REP   | 1998-03-24 |
+-----------+----------+------------+
3 rows in set (0.00 sec)

_________________________________________________________________________________________________________________________________________________________________
6.	Display the last name and department ID of all employees in departments 20 or 50 in ascending alphabetical order by last_name.

mysql> select last_name,department_id from employees
    -> where department_id in (20,50)
    -> order by last_name;
+-------------+---------------+
| last_name   | department_id |
+-------------+---------------+
| Atkinson    |            50 |
| Bell        |            50 |
| Bissot      |            50 |
| Bull        |            50 |
| Cabrio      |            50 |
| Chung       |            50 |
| Davies      |            50 |
| Dellinger   |            50 |
| Dilly       |            50 |
| Everett     |            50 |
| Fay         |            20 |
| Feeney      |            50 |
| Fleaur      |            50 |
| Fripp       |            50 |
| Gates       |            50 |
| Gee         |            50 |
| Geoni       |            50 |
| Grant       |            50 |
| Hartstein   |            20 |
| Jones       |            50 |
| Kaufling    |            50 |
| Ladwig      |            50 |
| Landry      |            50 |
| Mallin      |            50 |
| Markle      |            50 |
| Marlow      |            50 |
| Matos       |            50 |
| McCain      |            50 |
| Mikkilineni |            50 |
| Mourgos     |            50 |
| Nayer       |            50 |
| OConnell    |            50 |
| Olson       |            50 |
| Patel       |            50 |
| Perkins     |            50 |
| Philtanker  |            50 |
| Rajs        |            50 |
| Rogers      |            50 |
| Sarchand    |            50 |
| Seo         |            50 |
| Stiles      |            50 |
| Sullivan    |            50 |
| Taylor      |            50 |
| Vargas      |            50 |
| Vollman     |            50 |
| Walsh       |            50 |
| Weiss       |            50 |
+-------------+---------------+
47 rows in set (0.00 sec)


_________________________________________________________________________________________________________________________________________________________________
7.	The HR department needs a report that displays the last name and hire date of all employees who were hired in 2006.

mysql> select last_name,hire_date from employees
    -> where year(hire_date)=2006;
Empty set (0.00 sec)

_________________________________________________________________________________________________________________________________________________________________
8.	Create a report to display the last name and job title of all employees who do not have a manager.

mysql> select e.last_name,j.job_title from employees e,jobs j where e.manager_id is null and e.job_id=j.job_id;
+-----------+-----------+
| last_name | job_title |
+-----------+-----------+
| King      | President |
+-----------+-----------+
1 row in set (0.00 sec)


_________________________________________________________________________________________________________________________________________________________________
9.	Create a report to display the last name, salary, and commission for all employees who earn commissions.
 Sort data in descending order of salary and commissions. Use the column’s numeric position in the ORDER BY clause.



_________________________________________________________________________________________________________________________________________________________________
10.	Display the last names of all employees where the third letter of the name is “a.”


11.	Display the last names of all employees who have both an “a” and an “e” in their last name.


12.	Display the last name, job, and salary for all employees whose job is that of a sales representative or a stock clerk, and whose salary is not equal to $2,500, $3,500, or $7,000.

13.	Display the last name, salary, and commission for all employees whose commission amount is 20%. 


----------------------------------------------- Aggregate Function -------------------------------------
The HR department needs the following reports:
14.	Find the highest, lowest, sum, and average salary of all employees. Label the columns Maximum, Minimum, Sum, and Average, respectively. Round your results to the nearest whole number.


15.	Create a query that displays employees’ last names, and indicates the amounts of their salaries with asterisks. Each asterisk signifies a thousand dollars. Sort the data in descending order of salary. Label the column EMPLOYEES_AND_THEIR_SALARIES.

------------------------------------------ Joins --------------------------------------------------------
16.	Write a query for the HR department to produce the addresses of all the departments. Use the LOCATIONS and COUNTRIES tables. Show the location ID, street address, city, state or province, and country in the output. 


17.	The HR department needs a report of all employees with corresponding departments. Write a query to display the last name, department number, and department name for all the employees.


18.	The HR department needs a report of employees in Toronto. Display the last name, job, department number, and department name for all employees who work in Toronto.

19.	Create a report to display employees’ last names and employee numbers along with their managers’ last names and manager numbers. Label the columns Employee, Emp#, Manager, and Mgr#, respectively. 

20.	Modifyabove to display all employees, including King, who has no manager. Order the results by employee number.

21.	Create a report for the HR department that displays employee last names, department numbers, and all employees who work in the same department(colleague) as a given employee. Give each column an appropriate label.

22.	The HR department needs a report on job grades and salaries. To familiarize yourself with the JOB_GRADES table, first show the structure of the JOB_GRADES table. Then create a query that displays the name, job, department name, salary, and grade for all employees.
DESC JOB_GRADES;


23.	The HR department wants to determine the names of all employees who were hired after Davies. Create a query to display the name and hire date of any employee hired after employee Davies.

24.	The HR department needs to find the names and hire dates of all employees who were hired before their managers, along with their managers’ names and hire dates.


 ------------------------------------------------ Using Subqueries to Solve Queries -------------------------
 
25.	The HR department needs a query the to display  the last name and hire date of any employee in the same department as the employee whose name the user supplies (excluding that employee). For example, if the user enters Zlotkey, find all employees who work with Zlotkey (excluding Zlotkey).

26. Create a report that displays the employee number, last name, and salary of all employees who earn more than the average salary. Sort the results in ascending order by salary.

27.	Write a query that displays the employee number and last name of all employees who work in a department with any employee whose last name contains the letter “u.” 

28.	The HR department needs a report that displays the last name, department number, and job ID of all employees whose department location ID is 1700.

29.	Create a report for HR that displays the last name and salary of every employee who reports to King.


30.	Create a report for HR that displays the department number, last name, and job ID for every employee in the Executive department.

select department_id,last_name,job_id from employees where department_id = (select department_id from departments where department_name='Executive');
#####
mysql> select department_id,last_name,job_id from employees where department_id = (select department_id from departments where department_name='Executive');
+---------------+-----------+---------+
| department_id | last_name | job_id  |
+---------------+-----------+---------+
|            90 | King      | AD_PRES |
|            90 | Kochhar   | AD_VP   |
|            90 | De Haan   | AD_VP   |
+---------------+-----------+---------+
3 rows in set (0.00 sec)
_________________________________________________________________________________________________________________________________________________________________

31.	Create a report that displays a list of all employees whose salary is more than the salary of any employee from department 60.

select * from employees where salary>(select max(salary) from employees where department_id=60);
##############
mysql> select * from employees where salary>(select max(salary) from employees where department_id=60);
+-------------+------------+-----------+----------+--------------------+------------+---------+----------+----------------+------------+---------------+
| employee_id | first_name | last_name | email    | phone_number       | hire_date  | job_id  | salary   | commission_pct | manager_id | department_id |
+-------------+------------+-----------+----------+--------------------+------------+---------+----------+----------------+------------+---------------+
|         100 | Steven     | King      | SKING    | 515.123.4567       | 1987-06-17 | AD_PRES | 24000.00 |           NULL |       NULL |            90 |
|         101 | Neena      | Kochhar   | NKOCHHAR | 515.123.4568       | 1989-09-21 | AD_VP   | 17000.00 |           NULL |        100 |            90 |
|         102 | Lex        | De Haan   | LDEHAAN  | 515.123.4569       | 1993-01-13 | AD_VP   | 17000.00 |           NULL |        100 |            90 |
|         108 | Nancy      | Greenberg | NGREENBE | 515.124.4569       | 1994-08-17 | FI_MGR  | 12000.00 |           NULL |        101 |           100 |
|         114 | Den        | Raphaely  | DRAPHEAL | 515.127.4561       | 1994-12-07 | PU_MAN  | 11000.00 |           NULL |        100 |            30 |
|         145 | John       | Russell   | JRUSSEL  | 011.44.1344.429268 | 1996-10-01 | SA_MAN  | 14000.00 |           0.40 |        100 |            80 |
|         146 | Karen      | Partners  | KPARTNER | 011.44.1344.467268 | 1997-01-05 | SA_MAN  | 13500.00 |           0.30 |        100 |            80 |
|         147 | Alberto    | Errazuriz | AERRAZUR | 011.44.1344.429278 | 1997-03-10 | SA_MAN  | 12000.00 |           0.30 |        100 |            80 |
|         148 | Gerald     | Cambrault | GCAMBRAU | 011.44.1344.619268 | 1999-10-15 | SA_MAN  | 11000.00 |           0.30 |        100 |            80 |
|         149 | Eleni      | Zlotkey   | EZLOTKEY | 011.44.1344.429018 | 2000-01-29 | SA_MAN  | 10500.00 |           0.20 |        100 |            80 |
|         150 | Peter      | Tucker    | PTUCKER  | 011.44.1344.129268 | 1997-01-30 | SA_REP  | 10000.00 |           0.30 |        145 |            80 |
|         151 | David      | Bernstein | DBERNSTE | 011.44.1344.345268 | 1997-03-24 | SA_REP  |  9500.00 |           0.25 |        145 |            80 |
|         156 | Janette    | King      | JKING    | 011.44.1345.429268 | 1996-01-30 | SA_REP  | 10000.00 |           0.35 |        146 |            80 |
|         157 | Patrick    | Sully     | PSULLY   | 011.44.1345.929268 | 1996-03-04 | SA_REP  |  9500.00 |           0.35 |        146 |            80 |
|         162 | Clara      | Vishney   | CVISHNEY | 011.44.1346.129268 | 1997-11-11 | SA_REP  | 10500.00 |           0.25 |        147 |            80 |
|         163 | Danielle   | Greene    | DGREENE  | 011.44.1346.229268 | 1999-03-19 | SA_REP  |  9500.00 |           0.15 |        147 |            80 |
|         168 | Lisa       | Ozer      | LOZER    | 011.44.1343.929268 | 1997-03-11 | SA_REP  | 11500.00 |           0.25 |        148 |            80 |
|         169 | Harrison   | Bloom     | HBLOOM   | 011.44.1343.829268 | 1998-03-23 | SA_REP  | 10000.00 |           0.20 |        148 |            80 |
|         170 | Tayler     | Fox       | TFOX     | 011.44.1343.729268 | 1998-01-24 | SA_REP  |  9600.00 |           0.20 |        148 |            80 |
|         174 | Ellen      | Abel      | EABEL    | 011.44.1644.429267 | 1996-05-11 | SA_REP  | 11000.00 |           0.30 |        149 |            80 |
|         201 | Michael    | Hartstein | MHARTSTE | 515.123.5555       | 1996-02-17 | MK_MAN  | 13000.00 |           NULL |        100 |            20 |
|         204 | Hermann    | Baer      | HBAER    | 515.123.8888       | 1994-06-07 | PR_REP  | 10000.00 |           NULL |        101 |            70 |
|         205 | Shelley    | Higgins   | SHIGGINS | 515.123.8080       | 1994-06-07 | AC_MGR  | 12000.00 |           NULL |        101 |           110 |
+-------------+------------+-----------+----------+--------------------+------------+---------+----------+----------------+------------+---------------+
23 rows in set (0.00 sec)

mysql> select max(salary) from employees where department_id=60;
+-------------+
| max(salary) |
+-------------+
|     9000.00 |
+-------------+
1 row in set (0.00 sec)

_________________________________________________________________________________________________________________________________________________________________
32.	Modify above query in display the employee number, last name, and salary of all employees who earn more than the average salary 
and who work in a department with any employee whose last_name contains letter 'U';

mysql> select employee_id,last_name,salary from employees 
where salary>(select avg(salary) from employees) 
and 
department_id in (select department_id from employees where last_name like '%U%');
+-------------+------------+----------+
| employee_id | last_name  | salary   |
+-------------+------------+----------+
|         103 | Hunold     |  9000.00 |
|         108 | Greenberg  | 12000.00 |
|         109 | Faviet     |  9000.00 |
|         110 | Chen       |  8200.00 |
|         111 | Sciarra    |  7700.00 |
|         112 | Urman      |  7800.00 |
|         113 | Popp       |  6900.00 |
|         114 | Raphaely   | 11000.00 |
|         120 | Weiss      |  8000.00 |
|         121 | Fripp      |  8200.00 |
|         122 | Kaufling   |  7900.00 |
|         123 | Vollman    |  6500.00 |
|         145 | Russell    | 14000.00 |
|         146 | Partners   | 13500.00 |
|         147 | Errazuriz  | 12000.00 |
|         148 | Cambrault  | 11000.00 |
|         149 | Zlotkey    | 10500.00 |
|         150 | Tucker     | 10000.00 |
|         151 | Bernstein  |  9500.00 |
|         152 | Hall       |  9000.00 |
|         153 | Olsen      |  8000.00 |
|         154 | Cambrault  |  7500.00 |
|         155 | Tuvault    |  7000.00 |
|         156 | King       | 10000.00 |
|         157 | Sully      |  9500.00 |
|         158 | McEwen     |  9000.00 |
|         159 | Smith      |  8000.00 |
|         160 | Doran      |  7500.00 |
|         161 | Sewall     |  7000.00 |
|         162 | Vishney    | 10500.00 |
|         163 | Greene     |  9500.00 |
|         164 | Marvins    |  7200.00 |
|         165 | Lee        |  6800.00 |
|         168 | Ozer       | 11500.00 |
|         169 | Bloom      | 10000.00 |
|         170 | Fox        |  9600.00 |
|         171 | Smith      |  7400.00 |
|         172 | Bates      |  7300.00 |
|         174 | Abel       | 11000.00 |
|         175 | Hutton     |  8800.00 |
|         176 | Taylor     |  8600.00 |
|         177 | Livingston |  8400.00 |
+-------------+------------+----------+
42 rows in set (0.00 sec)

_________________________________________________________________________________________________________________________________________________________________
------------------------------------: Using Set Operators :--------------------------

33.	The HR department needs a list of department IDs for departments that do not contain the job ID ST_CLERK. Use the set operators to create this report.

34.	The HR department needs a list of countries that have no departments located in them. Display the country IDs and the names of the countries. Use the set operators to create this report.

35.	Produce a list of all the employees who work in departments 50 and 80. Display the employee ID, job ID, and department ID by using the set operators.

36.	Create a report that lists the detail of all employees who are sales representatives and are currently working in the sales department.

----------------------------------------Managing Tables by Using DML Statements-------------------------------------------
Insert data into the MY_EMPLOYEE table.
37.	Create a table called MY_EMPLOYEE.

CREATE TABLE my_employee
(id int CONSTRAINT my_employee_id_pk PRIMARY Key,
 last_name VARCHAR(25),
first_name VARCHAR(25),
userid VARCHAR(8), salary decimal(9,2));



38.	Create an INSERT statement to add the first row of data to the MY_EMPLOYEE table from the following sample data. Do not list the columns in the INSERT clause.

ID	LAST_NAME	FIRST_NAME	USERID	SALARY
1	Patel	Ralph	rpatel	895
2	Dancs	Betty	bdancs	860
3	Biri	Ben	bbiri	1100
4	Newman	Chad	cnewman	750
5	Ropeburn	Audrey	aropebur	1550

pass values to id last_name,first_name and salary and generate userid as given

------------------------------------- procedure ----------------------
1. Retrieve Employees by Manager
Objective: Create a stored procedure that retrieves all employees under a specific manager.

Input: p_manager_id IN NUMBER (Manager's employee ID)
Output: List of employees with their details (Employee ID, First Name, Last Name, Job Title, Salary)
Business Logic: The procedure should return employees whose manager_id matches the given p_manager_id.


2. Update Employee Salary
Objective: Create a stored procedure that updates the salary of a given employee based on their employee ID.
Input: p_employee_id IN NUMBER, p_new_salary IN NUMBER
Output: Success message or error message if the employee is not found.
Business Logic: The procedure should check if the employee exists and then update their salary. If the employee doesn't exist, return an error message.

3. Employee Count by Department
Objective: Create a stored procedure that returns the count of employees in a specific department.
Input: p_department_id IN NUMBER
Output: Count of employees in that department.
Business Logic: The procedure should count the employees in the specified department and return the result.


4. Employee Job Title and Salary Information
Objective: Create a stored procedure that retrieves employees' job titles and salary information based on a specific job title.
Input: p_job_id IN VARCHAR2
Output: List of employees with job title and salary.
Business Logic: The procedure should return the employee ID, first name, last name, and salary for employees with the specified job title.


5. Promote Employee
Objective: Create a stored procedure to promote an employee by changing their job title and salary.
Input: p_employee_id IN NUMBER, p_new_job_id IN VARCHAR2, p_salary_increase IN NUMBER
Output: Success or failure message.
Business Logic: The procedure should check if the employee exists, and then update the job_id and salary based on the provided values. Ensure salary increase is not less than a certain percentage (e.g., 10%).

6. Employee Payroll Report
Objective: Create a stored procedure that generates a payroll report for a specific date range.
Input: p_start_date IN DATE, p_end_date IN DATE
Output: A list of employees along with their payroll details (Employee ID, Name, Job Title, Salary, Bonus, Total Pay).
Business Logic: The procedure should return payroll data (including salary and any bonuses) for employees who were active during the specified date range.

7. Employee Tenure
Objective: Create a stored procedure that calculates and returns the tenure (in years) for an employee based on their hire date.
Input: p_employee_id IN NUMBER
Output: Employee's tenure in years.
Business Logic: The procedure should calculate the difference between the current date and the employee's hire date, returning the number of years the employee has worked.

8. Department Budget Summary
Objective: Create a stored procedure that calculates and returns the total salary expense for a department.
Input: p_department_id IN NUMBER
Output: Total salary expense for the department.
Business Logic: The procedure should sum the salaries of all employees in the given department and return the total salary expense.

9. Find Employees with No Manager
Objective: Create a stored procedure that identifies employees who do not have a manager assigned.
Input: None
Output: List of employees without a manager (Employee ID, Name, Job Title).
Business Logic: The procedure should return a list of employees whose manager_id is NULL.


10. Employee Turnover Rate
Objective: Create a stored procedure that calculates the turnover rate for a department within a given period.
Input: p_department_id IN NUMBER, p_start_date IN DATE, p_end_date IN DATE
Output: Turnover rate as a percentage of the total number of employees in that department who left during the specified period.
Business Logic: The procedure should calculate the number of employees who left the department within the given date range and divide by the total number of employees in the department during that period.


----------------------------- Function -----------------------
1. Problem: "The finance department needs to calculate the average salary for each department to analyze salary distribution and budget planning."

Function: GetAverageDepartmentSalary(dept_id INT)

2. Problem: "As an HR analyst, I need to quickly retrieve the full name of an employee given their employee ID for reporting purposes."

Function: GetEmployeeFullName(emp_id INT)

3.Problem: "When reviewing employee information, I need to know the department name an employee belongs to, given their employee ID."

Function: GetEmployeeDepartmentName(emp_id INT)

4.Problem: "The HR department requires a count of employees in each department for workforce planning and resource allocation."

Function: CountEmployeesInDepartment(dept_id INT)

5.Problem: "The HR department needs to know the highest salary within each department for salary benchmarking and to identify potential pay disparities."

Function: GetHighestSalaryInDepartment(dept_id INT)
 












